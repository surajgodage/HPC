#include<bits/stdc++.h>
#include<omp.h>
using namespace std;

void serial_bubble_sort(vector<int> &arr, int n)
{
	int i, j;
    	for (i = 0; i < n - 1; i++) {
        	for (j = 0; j < n - i - 1; j++) {
            		if (arr[j] > arr[j + 1]) 
                		swap(arr[j], arr[j + 1]);
       		}
    	}
}

void parallel_bubble_sort(vector<int> &arr, int n)
{
	int phase, i;
    	for (phase = 0; phase < n; phase++) {
        	if (phase % 2 == 0) {  
            		#pragma omp parallel for private(i)
            		for (i = 2; i < n; i += 2) {
                		if (arr[i - 1] > arr[i]) 
		            		swap(arr[i-1], arr[i]);
                	}
            	}
        	else {  
            		#pragma omp parallel for private(i)
            		for (i = 1; i < n; i += 2) {
                		if (arr[i - 1] > arr[i]) 
		            		swap(arr[i-1], arr[i]);
                	}
            	}
        }
}

void merge(vector<int> &arr, int l, int m, int r) 
{
	int n1 = m - l + 1;
	int n2 = r - m;

	int L[n1], R[n2];
	int i, j, k;

	for (i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];

	i = 0;
	j = 0;
	k = l;
	while (i < n1 && j < n2) {
		if (L[i] <= R[j]) {
	    		arr[k] = L[i];
	    		i++;
		}
		else {
	    		arr[k] = R[j];
	    		j++;
		}
		k++;
	}

	while (i < n1) {
		arr[k] = L[i];
		i++;
		k++;
	}

	while (j < n2) {
		arr[k] = R[j];
		j++;
		k++;
	}
}


void serial_merge_sort(vector<int> &arr, int l, int r)
{
	if (l < r) 
	{
        	int m = l + (r - l) / 2;
		serial_merge_sort(arr, l, m);
		serial_merge_sort(arr, m + 1, r);
            	
        	merge(arr, l, m, r);
    	}
}

void parallel_merge_sort(vector<int> &arr, int l, int r)
{
	if (l < r) 
	{
        	int m = l + (r - l) / 2;

        	#pragma omp parallel sections
        	{
            		#pragma omp section
            		{
                		parallel_merge_sort(arr, l, m);
            		}

            		#pragma omp section
            		{
                		parallel_merge_sort(arr, m + 1, r);
            		}
        	}
        	merge(arr, l, m, r);
    	}
}

int main()
{
	int n; 
	cout<<"\n Enter the size of the array : ";
	cin>>n;
	
	vector<int> arr, arr1, arr2, arr3, arr4;
	for(int i=0; i<n; i++)
		arr.push_back(rand()%500);
		
	cout<<"\n Original Array --> \n";
	for(int i=0; i<n; i++)
		cout<<arr[i]<<" ";
	cout<<endl;
	
	double start, end;
	
	cout<<"\n**************** SERIAL BUBBLE SORT *****************\n";
	arr1 = arr;
	start = omp_get_wtime();
	serial_bubble_sort(arr1, n);
	end = omp_get_wtime();
	for(int i=0; i<arr.size(); i++)
		cout<<arr1[i]<<" ";
	cout<<"\n Time taken = "<<end-start<<" seconds.\n";
	
	cout<<"\n**************** PARALLEL BUBBLE SORT *****************\n";
	arr2 = arr;
	start = omp_get_wtime();
	parallel_bubble_sort(arr2, n);
	end = omp_get_wtime();
	#pragma omp parallel
	{
		for(int i=0; i<arr.size(); i++)
			cout<<arr2[i]<<" ";
	}
	cout<<"\n Time taken = "<<end-start<<" seconds.\n";
	
	cout<<"\n**************** SERIAL MERGE SORT *****************\n";
	arr3 = arr;
	start = omp_get_wtime();
	serial_merge_sort(arr3, 0, n);
	end = omp_get_wtime();
	for(int i=0; i<arr.size(); i++)
		cout<<arr3[i]<<" ";
	cout<<"\n Time taken = "<<end-start<<" seconds.\n";
	
	cout<<"\n**************** PARALLEL MERGE SORT *****************\n";
	arr4 = arr;
	start = omp_get_wtime();
	parallel_merge_sort(arr4, 0, n);
	end = omp_get_wtime();
	for(int i=0; i<arr.size(); i++)
		cout<<arr4[i]<<" ";
	cout<<"\n Time taken = "<<end-start<<" seconds.\n";
		

	return 0;
}
